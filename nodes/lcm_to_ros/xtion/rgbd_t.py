"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class rgbd_t(object):
    __slots__ = ["utime", "width", "height", "rgblen", "depthlen", "rgb", "depth"]

    __typenames__ = ["int64_t", "int32_t", "int32_t", "int32_t", "int32_t", "byte", "byte"]

    __dimensions__ = [None, None, None, None, None, ["rgblen"], ["depthlen"]]

    def __init__(self):
        self.utime = 0
        self.width = 0
        self.height = 0
        self.rgblen = 0
        self.depthlen = 0
        self.rgb = ""
        self.depth = ""

    def encode(self):
        buf = BytesIO()
        buf.write(rgbd_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiiii", self.utime, self.width, self.height, self.rgblen, self.depthlen))
        buf.write(bytearray(self.rgb[:self.rgblen]))
        buf.write(bytearray(self.depth[:self.depthlen]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != rgbd_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return rgbd_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = rgbd_t()
        self.utime, self.width, self.height, self.rgblen, self.depthlen = struct.unpack(">qiiii", buf.read(24))
        self.rgb = buf.read(self.rgblen)
        self.depth = buf.read(self.depthlen)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if rgbd_t in parents: return 0
        tmphash = (0x9765ad14343d07fc) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if rgbd_t._packed_fingerprint is None:
            rgbd_t._packed_fingerprint = struct.pack(">Q", rgbd_t._get_hash_recursive([]))
        return rgbd_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

