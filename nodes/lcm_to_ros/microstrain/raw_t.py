"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class raw_t(object):
    __slots__ = ["utime", "timeTow", "timeWeek", "timeFlags", "accel", "gyro", "mag", "pressure"]

    __typenames__ = ["int64_t", "double", "int16_t", "int16_t", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, [3], [3], [3], None]

    def __init__(self):
        self.utime = 0
        self.timeTow = 0.0
        self.timeWeek = 0
        self.timeFlags = 0
        self.accel = [ 0.0 for dim0 in range(3) ]
        self.gyro = [ 0.0 for dim0 in range(3) ]
        self.mag = [ 0.0 for dim0 in range(3) ]
        self.pressure = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(raw_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qdhh", self.utime, self.timeTow, self.timeWeek, self.timeFlags))
        buf.write(struct.pack('>3f', *self.accel[:3]))
        buf.write(struct.pack('>3f', *self.gyro[:3]))
        buf.write(struct.pack('>3f', *self.mag[:3]))
        buf.write(struct.pack(">f", self.pressure))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != raw_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return raw_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = raw_t()
        self.utime, self.timeTow, self.timeWeek, self.timeFlags = struct.unpack(">qdhh", buf.read(20))
        self.accel = struct.unpack('>3f', buf.read(12))
        self.gyro = struct.unpack('>3f', buf.read(12))
        self.mag = struct.unpack('>3f', buf.read(12))
        self.pressure = struct.unpack(">f", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if raw_t in parents: return 0
        tmphash = (0xd5eb0bf72666931c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if raw_t._packed_fingerprint is None:
            raw_t._packed_fingerprint = struct.pack(">Q", raw_t._get_hash_recursive([]))
        return raw_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

